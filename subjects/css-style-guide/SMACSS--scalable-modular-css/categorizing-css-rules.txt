Categorizing CSS Rules
=======================

    Scalable modular css help provide solution to these questions:

      • How do you decide whether to use ID, class, and other selectors?
      • Which elements should get the styling behaviors?
      • How do you make it easy to understand how your site and
        your styles are doing?

    Key to the solution the practice of using categorizing css rules.

    Categorizing codify patterns

        parttern are things that repeat themselves
        within our design.  Results in less code, easier maintenance
        and greater consistency in the user experience.

    There are five types of categories:

        1. Base
        2. Layout
        3. Module
        4. State
        5. Theme

=======================================================================

1. Base Rules:

    In a way, Base Rules is like crafting your own CSS Reset:

        Developing your own set of default styles instead of
        using CSS Reset can be an advantage since may reset frameworks
        can be overly aggressive and introduce more problems than they
        solve --- like removing margin/padding only to introduce them
        again later --- this creates duplicated code.

    Does not involve Class or Id selectors

    Never use !important

    Defining the *default* styling for how that element should
    look in all occurrences on the page

    Base applies to:

        Single element

            html, body, form { ... }

        Could include attribute selectors:

            input[type=text] { ... }

        Pseudo-class

            a:hover

        Child selectors or sibling selectors.

            li a { ... }
            ul > li { ... }


2. Layout Rules


    Use IDs for unique layout within a page:

        <div id="header"></div>
        <div id="sidebar"></div>
        <div id="maincontent"></div>

        - - - - -

        #header { ... }
        #sidebar { ... }
        #maincontent { ... }

    Use Classes to modify layout behaviour:

        Example 1:

        #article { float: left; }
        #sidebar { float: right; }
        .l-flipped #article { float: right; }
        .l-flipped #sidebar { float: left; }

        Example 2:

        #article { width: 80%; float: left; }
        #sidebar { width: 20%; float: right; }
        .l-fixed #article { width: 600px; }
        .l-fixed #sidebar { width: 200px; }

    Prefix modifier class names with "l" to distinguish them
    from modules and states.


3. Module Rules

    Modules sit inside Layout components.

    Examples of module:

        navigation-bar
        carousels
        dialogs
        widgets

    Modules can be nested inside another module.
    Standalone component (can be moved into different layout)


    Naming of module:

        Use Classes, no Ids

        Modules are going to be the bulk of any project. As a result, having
        every module start with a prefix like .module- would be needlessly
        verbose. Modules just use the name of the module itself.

        BAD:

            .module-carousels-type-A {...}

        GOOD:

            .carousels-type-A {...}



4. State Rules

    ** State rules indicate a javascript dependency **

    State rules are ways to describe how our modules or layouts will
    look when in a particular state:

    • Is it hidden or expanded?
    • Is it active or inactive?
    • layout looks on screens that are smaller or bigger.
    • How a module might look in different views like the home
      page or the inside page.

    <div id="header" class="is-collapsed"></div>
    <div class="msg is-error"></div>
    <form>
        <!-- label is hidden from sight but still seen by the screen readers -->
        <label for="searchbox" class="is-hidden">Search</label>
        <input type="search" id="searchbox">
    </form>

    !important is allowed in state
    -------------------------------

        Since the state will likely need to override the style of a more complex
        rule set, the use of !important is recommended.

        Use of !important never result in conflict because you won’t normally
        have two states applied to the same module or two states that
        tend to affect the same set of styles, so specificity conflicts
        from using !important should be few and far between.

        ** Leave !important off until you actually need it.

        ** Remember, the use of !important should be avoided for all other
           rule types. Only states should have it.


    Module specific state rule
    --------------------------

        In a case where a state rule is made for a specific module, the state
        class name should include the module name in it.

        The state rule should also reside with the module rules and not
        with the rest of the global state rules.




=======================================================
